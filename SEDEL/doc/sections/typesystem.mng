%%% !!! WARNING: AUTO GENERATED. DO NOT MODIFY !!! %%%
\newcommand{\rulehl}[2][gray!40]{%
  \colorbox{#1}{$\displaystyle#2$}}

\section{Formalizing Typed First-Class Traits}
\label{sec:typesystem}

This section presents the syntax and semantics of \name. In particular,
we show how to elaborate high-level source language constructs (self-references, abstract methods, first-class traits, dynamic inheritance, etc)
in \name to \bname~\cite{alpuimdisjoint}, a pure record calculus with disjoint
polymorphism. The treatment of the self-reference and dynamic dispatching is
inspired by Cook and Palsberg's work on the denotational semantics for
inheritance~\cite{cook1989denotational}. We then prove the elaboration is type
safe, i.e., well-typed \name expressions are translated to well-typed \bname
terms. Finally we show that \name is coherent. Full proofs can be found in the appendix.

\subsection{Syntax}

\begin{figure}[t]
\centering
\begin{tabular}{lrcl}
  Types  & $\ottnt{A}, \ottnt{B}, \ottnt{C}$ & $\Coloneqq$ & $ \top  \mid  \mathsf{Int}  \mid \ottnt{A}  \rightarrow  \ottnt{B} \mid \ottnt{A}  \,\&\,  \ottnt{B} \mid  \ottsym{\{}  \ottmv{l}  \ottsym{:}  \ottnt{A}  \ottsym{\}} \mid \alpha \mid \forall \, \ottsym{(}  \alpha  *  \ottnt{A}  \ottsym{)}  .\,  \ottnt{B} \mid \hlmath{\ottkw{Trait} \, \ottsym{[}  \ottnt{A}  \ottsym{,}  \ottnt{B}  \ottsym{]}}$ \\
  Expressions & $\ottnt{E}$ & $\Coloneqq$ & $ \top  \mid  i  \mid \ottmv{x} \mid \lambda  \ottmv{x}  .\,  \ottnt{E} \mid \ottnt{E_{{\mathrm{1}}}} \, \ottnt{E_{{\mathrm{2}}}} \mid \Lambda \, \ottsym{(}  \alpha  *  \ottnt{A}  \ottsym{)}  .\,  \ottnt{E} \mid \ottnt{E} \, \ottnt{A} \mid \ottnt{E_{{\mathrm{1}}}}  \,,,\,  \ottnt{E_{{\mathrm{2}}}} \mid \ottnt{E}  \ottsym{:}  \ottnt{A} $ \\
         & & $\mid$ & $\ottsym{\{}  \ottmv{l}  \ottsym{=}  \ottnt{E}  \ottsym{\}} \mid \ottnt{E}  .\,  \ottmv{l} \mid \ottkw{letrec} \, \ottmv{x}  \ottsym{:}  \ottnt{A}  \ottsym{=}  \ottnt{E_{{\mathrm{1}}}} \, \ottkw{in} \, \ottnt{E_{{\mathrm{2}}}} \mid \hlmath{\ottkw{new} \, \ottsym{[}  \ottnt{A}  \ottsym{]}  \ottsym{(} \, \ottcomp{\ottnt{E_{\ottmv{i}}}}{\ottmv{i}} \, \ottsym{)}} \mid \hlmath{ \ottnt{E_{{\mathrm{1}}}}  \textasciicircum\,  \ottnt{E_{{\mathrm{2}}}} } $ \\
         & & $\mid$ & $\hlmath{\ottkw{trait} \, \ottsym{[}  \mathsf{self}  \ottsym{:}  \ottnt{B}  \ottsym{]} \, \ottkw{inherits} \, \ottcomp{\ottnt{E_{\ottmv{i}}}}{\ottmv{i}} \, \ottsym{\{} \, \ottcomp{\ottmv{l_{\ottmv{j}}}  \ottsym{=}  \ottnt{E'_{\ottmv{j}}}}{\ottmv{j}} \, \ottsym{\}}  \ottsym{:}  \ottnt{A}}$ \\
  Contexts & $\Gamma$ & $\Coloneqq$ & $ \bullet  \mid \Gamma  \ottsym{,}  \ottmv{x}  \ottsym{:}  \ottnt{A} \mid \Gamma  \ottsym{,}  \alpha  *  \ottnt{A}$ \\ \\
\end{tabular}
\begin{tabular}{llll}
  Record types & $\ottsym{\{}  \ottmv{l_{{\mathrm{1}}}}  \ottsym{:}  \ottnt{A_{{\mathrm{1}}}}  \ottsym{,} \, ... \, \ottsym{,}  \ottmv{l_{\ottmv{n}}}  \ottsym{:}  \ottnt{A_{\ottmv{n}}}  \ottsym{\}} $ & := & $\ottsym{\{}  \ottmv{l_{{\mathrm{1}}}}  \ottsym{:}  \ottnt{A_{{\mathrm{1}}}}  \ottsym{\}}  \,\&\, \, ... \, \,\&\,  \ottsym{\{}  \ottmv{l_{\ottmv{n}}}  \ottsym{:}  \ottnt{A_{\ottmv{n}}}  \ottsym{\}}$ \\
  Records &  $\ottsym{\{}  \ottmv{l_{{\mathrm{1}}}}  \ottsym{=}  \ottnt{E_{{\mathrm{1}}}}  \ottsym{,} \, ... \, \ottsym{,}  \ottmv{l_{\ottmv{n}}}  \ottsym{=}  \ottnt{E_{\ottmv{n}}}  \ottsym{\}} $ & := & $ \ottsym{\{}  \ottmv{l_{{\mathrm{1}}}}  \ottsym{=}  \ottnt{E_{{\mathrm{1}}}}  \ottsym{\}}  \,,,\, \, ... \, \,,,\,  \ottsym{\{}  \ottmv{l_{\ottmv{n}}}  \ottsym{=}  \ottnt{E_{\ottmv{n}}}  \ottsym{\}}$
\end{tabular}
\caption{\name core syntax and syntactic abbreviations}
\label{fig:sedel_syntax}
\end{figure}

The core syntax of \name is shown in \cref{fig:sedel_syntax}, with trait related
constructs \hll{highlighted}. For brevity of the meta-theoretic study, we do not
consider definitions, which can be added in standard ways.
%We omit mutable fields and other practical
%constructs in order to focus on the basic mechanisms of traits. The omitted
%constructs can be added in standard ways~\cite{DBLP:books/daglib/0005958}.

\subparagraph{Types.}
Metavariables $\ottnt{A}$, $\ottnt{B}$, $\ottnt{C}$ range over types. Types include a top
type $ \top $, type of integers $ \mathsf{Int} $, function types $\ottnt{A}  \rightarrow  \ottnt{B}$, intersection types $\ottnt{A}  \,\&\,  \ottnt{B}$,
singleton record types $\ottsym{\{}  \ottmv{l}  \ottsym{:}  \ottnt{A}  \ottsym{\}}$,  type variables $\alpha$ and disjoint
(universal) quantification $\forall \, \ottsym{(}  \alpha  *  \ottnt{A}  \ottsym{)}  .\,  \ottnt{B}$. The main
novelty is the type of first-class traits $\ottkw{Trait} \, \ottsym{[}  \ottnt{A}  \ottsym{,}  \ottnt{B}  \ottsym{]}$, which expresses
the requirement $\ottnt{A}$ and the functionality $\ottnt{B}$. We will use $ [  \ottnt{A}  /  \alpha  ]  \ottnt{B} $
to denote capture-avoiding substitution of $\ottnt{A}$ for $\alpha$ inside $\ottnt{B}$.


\subparagraph{Expressions.}
Metavariable $\ottnt{E}$ ranges over expressions. We start with constructs required
to encode objects based on records: term variables $\ottmv{x}$, lambda abstractions $\lambda  \ottmv{x}  .\,  \ottnt{E}$, function
applications $\ottnt{E_{{\mathrm{1}}}} \, \ottnt{E_{{\mathrm{2}}}}$, singleton records $\ottsym{\{}  \ottmv{l}  \ottsym{=}  \ottnt{E}  \ottsym{\}}$, record projections
$\ottnt{E}  .\,  \ottmv{l}$, recursive let bindings $\ottkw{letrec} \, \ottmv{x}  \ottsym{:}  \ottnt{A}  \ottsym{=}  \ottnt{E_{{\mathrm{1}}}} \, \ottkw{in} \, \ottnt{E_{{\mathrm{2}}}}$, disjoint type
abstraction $\Lambda \, \ottsym{(}  \alpha  *  \ottnt{A}  \ottsym{)}  .\,  \ottnt{E}$ and type application $\ottnt{E} \, \ottnt{A}$.
The calculus also supports a merge construct $\ottnt{E_{{\mathrm{1}}}}  \,,,\,  \ottnt{E_{{\mathrm{2}}}}$ for creating values of intersection
types and annotated expressions $\ottnt{E}  \ottsym{:}  \ottnt{A}$. We also include a canonical top
value $ \top $ and integer literals $ i $.

\subparagraph{First-class traits and trait expressions.}
The central construct of \name is the trait
expression%\footnote{The abstract syntax of trait expressions is slightly different from the concrete syntax.}
$\ottkw{trait} \, \ottsym{[}  \mathsf{self}  \ottsym{:}  \ottnt{B}  \ottsym{]} \, \ottkw{inherits} \, \ottcomp{\ottnt{E_{\ottmv{i}}}}{\ottmv{i}} \, \ottsym{\{} \, \ottcomp{\ottmv{l_{\ottmv{j}}}  \ottsym{=}  \ottnt{E'_{\ottmv{j}}}}{\ottmv{j}} \, \ottsym{\}}  \ottsym{:}  \ottnt{A}$,
which specifies a (possibly empty) list
of trait expressions $\overline{\ottnt{E_{\ottmv{i}}}}$ in the \lstinline{inherits} clause, an explicit
$\mathsf{self}$ reference (with type annotation $\ottnt{B}$), and a set of
methods $\{ \overline{l_j = E'_j} \}$. Intuitively this trait expression has
type $\ottkw{Trait} \, \ottsym{[}  \ottnt{B}  \ottsym{,}  \ottnt{A}  \ottsym{]}$. Unlike the conventional trait model, a trait
expression denotes a first-class value: it may occur anywhere where an
expression is expected. Trait instantiation expressions $\ottkw{new} \, \ottsym{[}  \ottnt{A}  \ottsym{]}  \ottsym{(} \, \ottcomp{\ottnt{E_{\ottmv{i}}}}{\ottmv{i}} \, \ottsym{)}$
instantiate a composition of trait expressions $\overline{\ottnt{E_{\ottmv{i}}}}$ to create an
object of type $\ottnt{A}$. Finally $ \ottnt{E_{{\mathrm{1}}}}  \textasciicircum\,  \ottnt{E_{{\mathrm{2}}}} $ is the forwarding expression,
where $\ottnt{E_{{\mathrm{1}}}}$ should be some trait.

\subparagraph{Abbreviations.}
For ease of programming, multiple-field record types are merely syntactic sugar
for intersections of single-field record types. Similarly, multi-field record
expressions are syntactic sugar for merges of single-field records.




\subsection{Semantics}

% \jeremy{How many rules should we show?}
% The type system of \name is based on the bidirectional type system of \bname.
% For succinctness, we only present
% rules regrading traits. The full set of rules can be found in the appendix.

\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.9,right=#1,#2]
    {#3}
    {#4}
}

\begin{figure}[t]
  \centering
  \begin{small}
  \drules[Sub]{$\ottnt{A}  \ottsym{<:}  \ottnt{B}$}{Subtyping}{arr, trait}
  \drules[WF]{$\Gamma  \vdash  \ottnt{A}$}{Well formedness}{and, trait}
  \end{small}
  \caption{Subtyping and well-formedness of \name (excerpt)}
  \label{fig:typesystem}
\end{figure}

\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.9,lab=#1,#2]
    {#3}
    {#4}
}


\subparagraph{Subtyping and Well-formedness.}
\Cref{fig:typesystem} shows the most relevant subtyping and well-formedness
rules for \name. Omitted rules are standard and can be found in previous
work~\cite{alpuimdisjoint}. The
subtyping rule for trait types (\rref{Sub-trait}) resembles the one for function
types (\rref{Sub-arr}) in that it is contravariant on the first type $\ottnt{A}$
and covariant on the second type $\ottnt{B}$. The well-formedness rule for trait
types is straightforward.

\begin{figure}[t]
  \centering
  \begin{small}
  \drules[D]{$\Gamma  \vdash  \ottnt{A}  *  \ottnt{B}$}{Disjointness}{top, topSym, var, varSym, forall, rec, recn, arrow, andL, andR, trait, traitArrOne, traitArrTwo, ax}
  \drules[Dax]{$\ottnt{A}  *_{ax}  \ottnt{B}$}{Disjointness axiom}{intTrait, traitForall, traitRec}
  \end{small}
  \caption{Disjointness rules of \name (excerpt)}
  \label{fig:disjoint}
\end{figure}


\subparagraph{Disjointness.}
\Cref{fig:disjoint} shows the disjointness judgment $\Gamma  \vdash  \ottnt{A}  *  \ottnt{B}$, which is
used for example in \rref{WF-and}. The disjointness checking is the underlying
mechanism of conflict detection. We naturally extend the disjointness rules in
\bname to cover trait types. We refer to
their paper~\cite{alpuimdisjoint} for further explanation. Here we discuss
the rules
related with traits. \Rref{D-trait} says that as long as the functionalities
that two traits provide are disjoint, the two trait types are disjoint.
\Rref{D-traitArr1,D-traitArr2} deal with situations where one of the two types
is a function type. At first glance, these two look strange because a trait type is
\textit{different} from a function type, and they ought to be disjoint as an axiom. The reason
is that \name has an elaboration semantics, and as we will see, trait types are translated to function
types. In order to ensure the elaboration is type-safe, we have to have special treatment for trait
and function types. In principle, if \name has its own semantics, then trait types are always disjoint
to function types. The axiom rules of the form $\ottnt{A}  *_{ax}  \ottnt{B}$ take care of two types with different language constructs.
% These rules capture the notion that any two types are disjoint unless one of
% them is an intersection types, a type variable or $ \top $.

\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.9,right=#1,#2]
    {#3}
    {#4}
}

\renewcommand{\rulehl}[1]{}

\begin{figure}[t]
  \centering
  \begin{small}
  \drules[Inf]{$\Gamma  \vdash  \ottnt{E}  \Rightarrow  \ottnt{A}  \rightsquigarrow  \ottnt{e}$}{Infer}{trait,forward,new}
  \end{small}
  \caption{Typing of \name (excerpt)}
  \label{fig:type}
\end{figure}

\subparagraph{Typing Traits.}
The typing rules of trait related constructs are shown in \cref{fig:type}. The full set of rules can be found in the appendix.
The reader is advised to ignore the \hll{highlighted} parts for now.
% As with conventional bidirectional type systems,
\name employs two modes: the inference mode
($ \Rightarrow $) and the checking mode ($ \Leftarrow $). The inference judgment $\Gamma  \vdash  \ottnt{E}  \Rightarrow  \ottnt{A}$
says that we can synthesize a type $A$ for expression $E$ in the context
$\Gamma$. The checking judgment $\Gamma  \vdash  \ottnt{E}  \Leftarrow  \ottnt{A}$ checks $\ottnt{E}$ against $\ottnt{A}$
in the context $\Gamma$. One representative of inference rules is
\begin{small}
\begin{mathpar}
 \drule{Inf-merge}
\end{mathpar}
\end{small}
which says that a merge of two expressions is valid only if their types are disjoint. This is the underlying
mechanism for conflict detection. One representative of checking rules is
\begin{small}
\begin{mathpar}
 \drule{Chk-sub}
\end{mathpar}
\end{small}
% typically known as the subsumption rule,
where subtyping is used to coerce expressions of one type to another.

\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.9,lab=#1,#2]
    {#3}
    {#4}
}


To type-check a trait (\rref{Inf-trait}) we first type-check if its inherited traits $\overline{\ottnt{E_{\ottmv{i}}}}$ are valid
traits. Note that each trait $\ottnt{E_{\ottmv{i}}}$ can possibly refer to $\mathsf{self}$. Methods
must all be well-typed in the usual sense. Apart from these, we have several
side-conditions to make sure traits are well-behaved. The well-formedness
judgment $\Gamma  \vdash  \ottnt{C_{{\mathrm{1}}}}  \,\&\, \, .. \, \,\&\,  \ottnt{C_{\ottmv{n}}}  \,\&\,  \ottnt{C}$ ensures that we do not have conflicting
methods (in inherited traits and the body). The subtyping judgments $\overline{\ottnt{B}  \ottsym{<:}  \ottnt{B_{\ottmv{i}}}}$ ensure that the
$\mathsf{self}$ parameter satisfies the requirements imposed by each
inherited trait. Finally the subtyping judgment $\ottnt{C_{{\mathrm{1}}}}  \,\&\, \, .. \, \,\&\,  \ottnt{C_{\ottmv{n}}}  \,\&\,  \ottnt{C}  \ottsym{<:}  \ottnt{A}$
sanity-checks that the assigned type $\ottnt{A}$ is compatible.

Trait instantiation (\rref{Inf-new}) requires that each instantiated trait is valid.
There are also several side-conditions, which serve the same
purposes as in \rref{Inf-trait}.
\Rref{Inf-forward} says that the first operand $\ottnt{E_{{\mathrm{1}}}}$ of the forwarding operator must be a trait. Moreover, the type of the second operand
$\ottnt{E_{{\mathrm{2}}}}$ must satisfy the requirement of $\ottnt{E_{{\mathrm{1}}}}$.


\begin{figure}[t]
\centering
\begin{tabular}{lrcl}
  Types  & $\tau, \sigma$ & $\Coloneqq$ & $ \top  \mid  \mathsf{Int}  \mid \tau  \rightarrow  \sigma \mid \tau  \,\&\,  \sigma \mid  \ottsym{\{}  \ottmv{l}  \ottsym{:}  \tau  \ottsym{\}} \mid \alpha \mid \forall \, \ottsym{(}  \alpha  *  \tau  \ottsym{)}  .\,  \sigma$ \\
  Expressions & $\,  \ottnt{e}$ & $\Coloneqq$ & $ \top  \mid  i  \mid \ottmv{x} \mid \lambda  \ottmv{x}  .\,  \ottnt{e} \mid \,  \ottnt{e_{{\mathrm{1}}}} \, \ottnt{e_{{\mathrm{2}}}} \mid \Lambda \, \ottsym{(}  \alpha  *  \tau  \ottsym{)}  .\,  \ottnt{e} \mid \,  \ottnt{e} \, \tau \mid \,  \ottnt{e_{{\mathrm{1}}}}  \,,,\,  \ottnt{e_{{\mathrm{2}}}} \mid \,  \ottnt{e}  \ottsym{:}  \tau $ \\
         & & $\mid$ & $\ottsym{\{}  \ottmv{l}  \ottsym{=}  \ottnt{e}  \ottsym{\}} \mid \,  \ottnt{e}  .\,  \ottmv{l} \mid \ottkw{letrec} \, \ottmv{x}  \ottsym{:}  \tau  \ottsym{=}  \ottnt{e_{{\mathrm{1}}}} \, \ottkw{in} \, \ottnt{e_{{\mathrm{2}}}} $
  % Contexts & $\Delta$ & $\Coloneqq$ & $ \bullet  \mid \Delta  \ottsym{,}  \ottmv{x}  \ottsym{:}  \tau \mid \Delta  \ottsym{,}  \alpha  *  \tau$
\end{tabular}
\caption{Syntax of \bname with let bindings}
\label{fig:fi_syntax}
\end{figure}


\subparagraph{Treatments of Exclusion, Super and Override.}
One may have noticed that in \cref{fig:sedel_syntax} we did not include the
exclusion operator in the core \name syntax, neither do \lstinline{super} and
\lstinline{override} appear. The reason is that in principle all
uses of the exclusion operator can be replaced by type annotations. For example
to exclude a \lstinline{bar} field from \lstinline${foo = a, bar = b, baz = c}$,
all we need is to annotate the record with type \lstinline${foo : A, baz : C}$
(suppose \lstinline{a} has type \lstinline{A}, etc). By \rref{Chk-sub}, the resulting
record is guaranteed to contain no \lstinline{bar} field. In the same vein,
the use of \lstinline{override} can be explained using the exclusion operator.
The \lstinline{super} keyword is internally a variable pointing to the \lstinline{inherits} clause
(its typing rule is similar to \rref{inf-trait} and can be found in the appendix).
We omit all of these features in the meta-theoretic study in order to focus our attention on
the essence of first-class traits.
However in practice, this is rather inconvenient as we need to write down
all types we wish to retain rather than the one to exclude. So in our
implementation we offer all of them.

\subparagraph{Elaboration.}

The operational semantics of \name is given by means of a type-directed
translation into \bname extended with (lazy) recursive let bindings.
This extension is standard and type-safe. The syntax of \bname is shown in \cref{fig:fi_syntax}. Let us go back to
\cref{fig:type}, now focusing on the \hll{highlighted} parts, which
denote the elaborated \bname terms. Most of them
are straightforward translations and are thus omitted. We explain the most
involved rules regarding traits. In \rref{Inf-trait}, a trait is translated into
a lambda abstraction with $\mathsf{self}$ as the formal parameter.
In essence a trait corresponds to what Cook and Palsberg~\cite{cook1989denotational} call a \emph{generator}.
 The translations
of the inherited traits (i.e., $\overline{\,  \ottnt{e_{\ottmv{i}}}}$) are each applied to
$\mathsf{self}$ and then merged with the translation of the trait body $\,  \ottnt{e}$. Now
it is clear why we require $\ottnt{B}$ (the type of $\mathsf{self}$) to be a subtype of each
$\ottnt{B_{\ottmv{i}}}$ (the requirement of each inherited trait). Note that we abuse the bar
notation here with the intention that $\ottcomplu{\ottsym{(}  \ottnt{e_{\ottmv{i}}} \, \mathsf{self}  \ottsym{)}}{\ottmv{i}}{{\mathrm{1}}}{..}{\ottmv{n}}$ means
$\,  \ottnt{e_{{\mathrm{1}}}} \, \mathsf{self}  \,,,\, \, .. \, \,,,\,  \ottnt{e_{\ottmv{n}}} \, \mathsf{self}$.
Here is an example of translating the \lstinline{ide_editor} trait from \cref{sec:overview} into
plain \bname terms equipped with definitions (suppose \lstinline{modal_mixin} and \lstinline{spell_mixin}
have been translated accordingly):
\lstinputlisting[linerange=59-60]{../../examples/overview2.sl}% APPLY:linerange=TRANS

The gray parts in \rref{Inf-new} show the translation of trait instantiation.
First we apply every translation (i.e., $\,  \ottnt{e_{\ottmv{i}}}$) of the instantiated traits to the $\mathsf{self}$ parameter,
and then merge the applications together. The bar notation is
interpreted similarly to the translation in \rref{Inf-trait}. Finally we compute the \emph{lazy}
fixed-point of the resulting merge term, i.e., self-reference must be updated to refer to
the whole composition. Taking the fixed-point of the
traits/generators again follows the denotational inheritance model by 
Cook and Palsberg.
 This is the key to the correct implementation of dynamic
 dispatching. Finally,
\rref{Inf-forward} translates forwarding expressions to function
applications. We show the translation of the
\lstinline{a_editor1} object in \cref{sec:traits} to illustrate the
translation of instantiation:
\lstinputlisting[linerange=68-68]{../../examples/overview2.sl}% APPLY:linerange=NEW

One remarkable point is that, while Cook and Palsberg work is done in
an untyped setting, here we apply their ideas in a setting with
disjoint intersection types and disjoint polymorphism. Our work shows that
disjoint intersection types blend in quite nicely with Cook and
Palsberg's denotational model of inheritance.

\subparagraph{Flattening Property.}

In the literature of traits~\cite{Ducasse_2006, scharli2003traits, JOT:issue_2006_05/article4},
a distinguished feature of traits is the
so-called \textit{flattening property}. This property says that a (non-overridden) method in a
trait has the same semantics as if it were implemented directly in the class
that uses the trait. It would be interesting to see if our trait model has this
property. One problem in formulating such a property is that flattening is a
property that talks about the equivalence between a flattened class (i.e., a
class where all trait methods have been inlined) and a class that reuses code
from traits. Since \name does not have classes, we cannot state exactly the same
property. However, we believe that one way to talk about a similar property for \name is to have something
along the lines of the following example:
\begin{example}[Flattening]
  Suppose we have \lstinline$m$ well-typed (i.e, conflict-free) traits \lstinline$trait t1 {l11 = E11, ..}, ..., trait tm {lm1 = Em1, ..}$,
  each with some number of methods, then
  \begin{tabular}{lll}
   \lstinline|new (trait inherits t1 & ... & tm {})| & $=$ & \lstinline|new (trait {l11 = E11,..,lm1 = Em1,..})|
  \end{tabular}
\end{example}
If we elaborate these two expressions, the property boils down to whether two merge terms
$\ottsym{(}  \ottnt{E_{{\mathrm{1}}}}  \,,,\,  \ottnt{E_{{\mathrm{2}}}}  \ottsym{)}  \,,,\,  \ottnt{E_{{\mathrm{2}}}}$ and $\ottnt{E_{{\mathrm{1}}}}  \,,,\,  \ottsym{(}  \ottnt{E_{{\mathrm{2}}}}  \,,,\,  \ottnt{E_{{\mathrm{3}}}}  \ottsym{)}$
have the same semantics. As is shown by Bi et al.~\cite{xuan_nested}, merges are
associative and commutative, so it is not hard to see that the above two expressions
are semantically equivalent. We leave it as future work to formally state and prove flattening.

% no gray anymore after this point
\renewcommand{\rulehl}[1]{#1}

\subsection{Type Soundness and Coherence}

% \begin{figure}[t]
%   \centering
%   \drules[TI]{$\Delta  \vdash  \ottnt{e}  \Rightarrow  \tau$}{Infer}{top, int, var, anno, app, tapp, merge, rec, proj, blam, lete}
%   \drules[TC]{$\Delta  \vdash  \ottnt{e}  \Leftarrow  \tau$}{Check}{abs,sub}
%   \caption{Typing  of \bname}
%   \label{fig:fi_typing}
% \end{figure}

Since the semantics of \name is defined by elaboration into \bname~\cite{alpuimdisjoint} it
is easy to show that key properties of \bname are also guaranteed by \name.
In particular, we show that the type-directed elaboration is
type-safe in the sense that well-typed \name expressions are elaborated into
well-typed \bname terms. We also show that the source language is
coherent and each valid source program has a unique (unambiguous)
elaboration. 

% To aid understanding of the type safety statement, we show the typing rules of
% \bname in \cref{fig:fi_typing}. The interested reader can refer to
% \cite{alpuimdisjoint} for further explanation.
We need a meta-function $| \cdot |$ that translates \name types to \bname types, whose definition is
straightforward. Only the translation of trait types deserves attention:
\begin{mathpar}
  | \ottkw{Trait} \, \ottsym{[}  \ottnt{A}  \ottsym{,}  \ottnt{B}  \ottsym{]} | = \ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}}  \rightarrow  \ottsym{\mbox{$\mid$}}  \ottnt{B}  \ottsym{\mbox{$\mid$}}
\end{mathpar}
That is, trait types are translated to
function types. $| \cdot |$ extends naturally to typing contexts.
Now we show several lemmas that are useful in the type-safety proof.

\begin{lemma}
  If $\Gamma  \vdash  \ottnt{A}$ then $\ottsym{\mbox{$\mid$}}  \Gamma  \ottsym{\mbox{$\mid$}}  \vdash  \ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}}$.
\end{lemma}
\begin{proof}
  By structural induction on the well-formedness judgment.
\end{proof}

\begin{lemma}
  If $\ottnt{A}  \ottsym{<:}  \ottnt{B}$ then $\ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}}  \ottsym{<:}  \ottsym{\mbox{$\mid$}}  \ottnt{B}  \ottsym{\mbox{$\mid$}}$.
\end{lemma}
\begin{proof}
  By structural induction on the subtyping judgment.
\end{proof}

\begin{lemma}
  If $\Gamma  \vdash  \ottnt{A}  *  \ottnt{B}$ then $\ottsym{\mbox{$\mid$}}  \Gamma  \ottsym{\mbox{$\mid$}}  \vdash  \ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}}  *  \ottsym{\mbox{$\mid$}}  \ottnt{B}  \ottsym{\mbox{$\mid$}}$.
\end{lemma}
\begin{proof}
  By structural induction on the disjointness judgment.
\end{proof}
% \begin{remark}
%  Due to the elaboration semantics, \rref{D-traitArr1,D-traitArr2} are needed to make this lemma hold.
% \end{remark}


Finally we are in a position to establish the type safety property:
\begin{theorem}[Type-safe translation]
  We have that:
  \begin{itemize}
  \item If $\Gamma  \vdash  \ottnt{E}  \Rightarrow  \ottnt{A}  \rightsquigarrow  \ottnt{e}$ then $ \ottsym{\mbox{$\mid$}}  \Gamma  \ottsym{\mbox{$\mid$}}  \vdash  \ottnt{e}  \Rightarrow  \ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}} $.
  \item If $ \Gamma   \vdash   \ottnt{E}   \Leftarrow   \ottnt{A}  \rulehl{ \rightsquigarrow   \ottnt{e} } $ then $ \ottsym{\mbox{$\mid$}}  \Gamma  \ottsym{\mbox{$\mid$}}  \vdash  \ottnt{e}  \Leftarrow  \ottsym{\mbox{$\mid$}}  \ottnt{A}  \ottsym{\mbox{$\mid$}} $.
  \end{itemize}
\end{theorem}
\begin{proof}
    By structural induction on the typing judgment.
\end{proof}

\begin{theorem}[Coherence] Each well-typed \name expression has a unique elaboration.
\end{theorem}
\begin{proof}
  By examining every elaboration rule, it is easy to see that the elaborated
  \bname term in the conclusion is uniquely determined by the elaborated \bname
  terms in the premises. Then by the coherence property of \bname, we conclude
  that each well-typed \name expression has a unique unambiguous elaboration,
  thus \name is coherent.
\end{proof}

% \bruno{Say something about super?}
% \bruno{Mention the appendix with proofs somewhere?}



%%% Local Variables:
%%% mode: latex
%%% TeX-master: "../paper"
%%% org-ref-default-bibliography: ../paper.bib
%%% End:
