OOPSLA'17 Paper #2 Reviews and Comments
===========================================================================
Paper #258 SEDEL: Safe and Expressive Delegation-Based Programming


Review #258A
===========================================================================
* Updated: 16 Jun 2017 6:30am EDT

Overall merit
-------------
D. Reject

Confidence
----------
X. I am an expert in this area

Paper summary
-------------
This work presents a new delegation-based language,
statically typed and polymorphic, SEDEL. SEDEL is
built around the idea that "inheritance is not subtyping"
and it supports a conflict-free form of multiple dynamic
inheritance they call \emph{composable traits}, taking
inspiration from various trait-oriented systems in the
literature. Their type system is inspired by the one
with disjoint intersections by Oliveira et al and
disjoint polymorphism (Alpuim et al).
They focus, in particular, on the lack of support of
the so-called classical covariant model of object-oriented
programming, taking as examples the design pattern Visitor
and the object algebras. They observe that in those
situations supertyping and inheritance go together, instead
of the conventional subtyping induced by subclasses.

Comments for author
-------------------
Going back to statically-typed delegation-based languages is
surely a good path of research, as they are a promise never really
kept. However, this paper is still far from being a convincing
proposal in the field.

There are some issues that should be better thought of, both in
the technical proposal and in its presentation. In the following
there are some observations on both matters.

First of all, it seems that there are very few extensions with respect
to the typed core language $F_i$ to be a paper on its own. In fact,
there are only the desugaring of traits (Sec. 6.2) and some modifications
to the subtyping system (Sec. 7).

Without presenting the complete subtyping
system together with its extensions it is impossible to understand which
are the changes and their consequences.

Sec. 2.1: are retroactive supertypes always sound?

Sec. 2.2: overloading is often considered bad design, therefore
you might want to avoid it in a new language proposal.

Sec. 2.3 (and bottom of page 13): A comparison with:

@INPROCEEDINGS{allen03firstclass,
  author = "E. Allen and J. Bannet and R. Cartwright",
  title = "A first-class approach to genericity",
  BOOKTITLE = "Proc. OOPSLA'03",
  PAGES = "96--114",
  year = "2003"
}

would be in order.

Page 8, lines 7-8: you say that in that case the type of self is top. Is your self polymorphic?

Page 8, lines 20-21: since a inheritance relation should be a IS_A relation, it looks like circle inheriting from point is a bad design choice.


Small details
-------------
Page 5, line 28: is -> has

Page 9, "Composition of traits": there are text repetition (this is just an example, in
general there is a tendency of repeating concepts more than once unneccessarily).

Page 12, line 10: the sentence starting with "Unfortunately" is not clear.


Comments post-response
---------------------------
I regret I was somehow rude, it was not my intention, I apologise about that.

However, there were some suggestions in my review that you did not consider in the end and you might find them useful to improve your paper.

Moreover, I will try to go over the five contributions you stated in the introduction:

- The design of SEDEL: I had the impression that SEDEL is an implementation of Fi plus some syntactic sugar. While it is important to go from a calculus to a language in order to make it usable, I was not able to see particular challenges in your implementation, I am afraid.

- Improved variants of extensible designs: Object Algebras and Extensible Visitors are certainly interesting applications of SEDEL, however these are not that surprinsing, as they are classical testbeds for new programming languages that are centered around separating inheritance and subtyping;

- A practical example where “Inheritance is not Subtyping” matters: see the point above.

- Elaboration of dynamically composable traits into disjoint intersection types/polymorphism: this is a true contribution, as this way you shed some new light to trait semantics, however this is shown in the paper more like de-sugared syntactic sugar and does not seem to suffice in order to consider your paper innovative enough in the whole. You might want to explore this direction more.

- Implementation and modularization case study: it would be good to find another example different from Object Algebras, it would strengthen the paper a great deal.

I would like to add that I enjoyed reading your paper, I am sorry I did not say this in my previous comments, however I think that this is still an incomplete study of a nice idea.



Review #258B
===========================================================================
* Updated: 16 Jun 2017 6:06:26pm EDT

Overall merit
-------------
C. Weak paper, though I will not fight strongly against it

Confidence
----------
Y. I am knowledgeable in this area, but not an expert

Paper summary
-------------
This paper presents the language SEDEL, which is a traits based OO language
supporting strict separation of types and traits (there are no classes) and
allows for traits to be first class values which may be composed
dynamically. It supports type-safety and coherence (which is not defined in
this paper, see (Alpuim et al 2017), but described as ensuring an
'unambiguous dynamic semantics').

The design of SEDEL supports a flexible and concise solution to a number of
difficult design problems, in particular in the expression of Extensible
Visitors and Object Algebras, and this is backed up by a number of concrete
examples, which are also used to introduce the language mechanisms in
general.

A core concept in the type system is that of intersection types, and the
ability to express both intersection types and traits and instance creation
expressions using a concise notation and first-class entities is the
foundation for all the nice properties of this language.

The language has been implemented based on a translation to $F_i$.

Comments for author
-------------------
Evaluation:

This is a very interesting paper, in particular because it presents a language
design which is sufficiently different from the mainstream to enable it to
have rather radically different properties than those of the "standard"
languages today. That's already refreshing.

Next, the ability of this language design to handle certain design challenges,
in particular Object Algebras as introduced by Oliveira et al., serves as a
strong indicator that this language design may help addressing problems that
existing languages do not handle very well.

It should be mentioned that the paper is written in a style where a large
number of statements along the way invite outright protest (e.g., that
inheritance in Cook et al.'s 'Inheritance is not subtyping' should be a
relation on objects, which matches very poorly with the actual paper). The
detailed comments below indicate various kinds of protest that I felt an
urge to express along the way. This may be good, because it invites readers to
think about issues that might not otherwise receive such a level of
enthusiasm, but it does also raise questions about the technical precision of
the paper in general. In particular, there are many situations where the paper
seems to use definitions of concepts which are so different from what I
consider to be an established standard (e.g., the notion of inheritance) that
it actually causes profound surprises or confusion, and that's just not very
helpful if the goal of the paper is to communicate somethinge to its readers
(rather than just puzzling them).

It should also be noted that a very large part of the technical content that
this paper relies on has already been published: The paper (Alpuim et
al. 2017) at ESOP seems to present the notion of disjoint polymorphism and all
the type rules of SEDEL (except the one on page 18), the type checking for
SEDEL seems to rely on the F_i type checker which is applied to the code
after it's been translated to F_i, and so on. In short, this paper seems to
present some examples that serve to promote the language design, but the fact
that the technical details have been presented elsewhere makes it somewhat
hard to see (from this paper) how it all works.

All in all, this is a very interesting and charming paper, but also highly
confusing. It is not obvious that it's ready for publication.

Detailed comments:

p1.30-40: When you imply that subclasses do not need to create subtypes, the
question immediately arises how a subclass can inherit a method
implementation: That method implementation would need to operate on 'this'
which would be an instance of the subclass, but the method was checked
statically assuming that 'this' would denote an instance of the class itself,
so we'd need substitutability in order to allow inheritance of method
implementations. That's not necessarily the same thing as being a subtype, but
unless you have some extra tricks in this area it would seem reasonable to
state up front that a subclass can't be completely type-incompatible with its
superclass.

p2.2, 'inheritance .. a relation on objects': Well, (Cook et al 1989)
considers 'inheritance' to be a relationship that creates a derived recursive
entity from a given base entity, preserving the internal structure, and that
entity may be an object, a class, or a type. The self-referential structure is
achieved using explicit recursion (a $\mu$ operator with a named "self" entity
of various kinds). This basically means that there is a true 'This' type in
every class, and it's even (apparently) expected to be used rather
liberally. This of course means that the derived structure (say, a derived
type T) doesn't admit substitutability with the base structure (the
type S that T was derived from), for instance because the type may have a
method foo taking an argument of type S, where the supertype foo takes a T.
  So unless you've made the reader understand that you are assuming, by
default, that inheritance involves mechanisms like a true 'This' type and
similar self-referential/recursive mechanisms, you're just going to ask for
protest from the readers because they can't see how you can be talking about
inheritance when you claim that it has properties which are not present in
any well-known kinds of inheritance.

p3.19, typo: 'not statically know' -> '.. known'. This typo occurs several
times in the paper.

p4.23, 'inherit code without creating any subtype relation': How would C++
private inheritance fail to do this? I assume you won't be satisfied with
that, but I'm not quite sure where it breaks down. Would be interesting to
have some remarks on that.

p4.37: It would of course be near-trivial to define the Java override rules
such that contravariant method argument types are allowed, but I think you're
right that there hasn't been much pressure to do so. But it's certainly not
because it breaks the underlying execution model or the soundness of the type
system.

p5, Fig.1: Nice example!

p6.33: You could give a tiny hint about what you'd like 'new x with y' to
do. It doesn't make a lot of sense to say that it isn't supported if it is so
unclear what the semantics of such a construct might be. For instance, in
terms of object identity and visible side-effects, would it create a new
object or return an existing one? Which one? Would existing clients of 'x' and
'y' be affected?

p6.35, 'intersection types .. second-class .. hard to build': If you insist on
separating classes and types then we couldn't expect a composition of two
objects (whatever that would mean) to have a type which is an intersection of
two types that these objects have.

p6.37, 'trait T[A] extends A': Well, (Scala) traits are exactly what you need
in order to extend many different classes with the same method (or set of
methods and state, as needed). Support for 'trait T[A] extends A' would
obviously require creation of classes at run time (because it's easy to create
examples where the set of type arguments used at run time is undecidable,
e.g., because it is isomorphic with the natural numbers). So your request for
extending 'multiple different traits/classes with the same method' is very
imprecise relative to the actual (missing) feature that you are referring
to. It's simply not very convincing when the arguments are so imprecise.

p8.7, 'type of self is .. top': If so, how can the method body of 'def x' be
type checked? Presumably, the 'x' which is evaluated there is not an infinite
loop calling the same method, so it could be an instance variable declared by
the '(x: Double, ..)' constructor syntax in the class header, and then 'this'
is apparently expected to have such an 'x' instance variable. Does 'top'
really have an 'x'?

p8.12: Is the 'Point' type going to be an inherent property of the new 'point'
object, or is it just going to be the type of the 'new' expression? Presumably
that object could be given all the types that it is structurally conformant
with (you mentioned structural typing earlier), so you might as well just
create a "typeless" object using 'point' and then return it from 'pointTest',
which would presumably benefit more from an explicit return type than the
'new' expression benefits from its type argument. So is this type argument to
'new' really useful?

p9.37: If trait composition conflicts are checked by the type checker at the
expression where the traits are composed, composition of traits cannot take
place unless the full set of members is known; that is, each trait which is
being composed must have a precisely known type (we can't, e.g., compose a
'color_point' trait with a 'sportscar' trade under the statically known types
'Point' and 'Vehicle', because the static types do not have a conflict on a
member called 'color', but the actual traits would have such a conflict). This
seems to contradict your earlier statement (p1.19) that composition should be
supported even without statically knowing the types of the traits being
composed? Or maybe those "object parts" weren't traits?

p10.9: It is not obvious how it would have eliminated the conflict if the
'radius' fields in 'circle' and in 'asOval' had had different types (you said
'ill-typed .. because .. (circle and asOval) have the same type for
.. radius'). I would have expected the issue to just get more difficult to
resolve if the two fields had had types, say, 'Double' and 'String'. If you
had then excluded the 'Double', how would the implementation in the trait
where 'radius' used to be a 'Double' now work correctly when it's a 'String'?

p10.31: So you can have first-class traits, nice! It's not obvious, however,
what you mean by saying that 'norm' is "parameterized"; isn't it more
reasonable to say that it's a first class value, and it happens to be received
as an actual argument in this case, and hence it's accessed using the formal
parameter 'norm'?

p10.46: Is the intention that 'A' is one type argument and 'B' is another, and
the first type parameter gets specified with no bracket whereas the second one
is enclosed in brackets (because it has that disjointness constraint)?
If you're calling 'merge' in a context where the first type argument (A) is a
formal type parameter of an enclosing generic entity (a generic trait,
presumably), how would you then statically check disjointness between? The
invocation could be something like 'merge[X, SomeType](x, y)' where 'X' is the
above-mentioned type parameter and 'SomeType' may be a compile-time constant
type, or possible some other type parameter in scope. Would you then constrain
the enclosing generic trait to never receive a type argument that isn't
disjoint with SomeType? How about the case where SomeType is yet another type
variable? It seems like there would be some non-trivial issues in keeping type
expressions disjoint..

p12.43, 'ExtExp should be a supertype of Exp': Note that these types are
essentially function types (they are single-method interfaces, you might say,
and that's nearly the same thing as a function type). If you consider the
function types in isolation then they'll have the subtype relationship you
need. So maybe this just demonstrates that you'd need to use a function type
in this context. Does the example easily generalize to cases where you want
more than one method? In that case, couldn't you represent the methods as a
record whose fields are first class functions, such that you can pass around a
bunch of separate functions rather than an object with a bunch of methods (and
thus use the function type subtyping of the fields in that record)? You have a
good point here, but it would be interesting to see whether it still appears
to be necessary to have the mechanisms that you are relying on, if you
try to express the same thing using first class functions.

p18.18: The rule Sub_R would give rise to a loss of information, so you might
want to use a union type for the argument types rather than intersection. In
fact, if an object can be typed as {l: A_1->B_1 } then we can call its 'l'
method passing an argument of type A_1, and it must be acceptable. Similarly,
we can type it as {l: A_2->B_2} so an argument of type A_2 must be
acceptable. So we get this:

  A <: {l: A_1->B_1 } & {l: A_2->B_2}
  .-----------------------------------
  A <: {l: A_1 | A_2 -> B_1 & B_2}

Addition to review after author response:
-----------------------------------------

Thanks for clarifying several points! The Sub_R rule I suggested was indeed a thinko, the standard rule is of course
{l: A_1 | A_2 -> B_1 & B_2} <: {l: A_1->B_1 } & {l: A_2->B_2}
and your Sub_R is interesting because it has the top level '&' on the left hand side.

However, when you say that the 'interpretation of the self-reference is the requirements of the trait', your description precisely matches the notion of the explicitly typed self-reference in Scala, and when you proceed to say 'The relaxation being that you can choose any type for the self-reference, rather than the fixed "This" type', it actually sounds like you consider 'This' to be a fixed type derived directly from the enclosing declaration (e.g., like the type of 'this' in Java), rather than being an existential type which is the type of 'this' and otherwise only known to have an upper bound which is that fixed type. Please check out papers by Kim Bruce for additional information about self types.

Questions for authors’ response
---------------------------------
- Cf. comment on p9.37: At the end of the paper I still didn't have a
  resolution of the issue described in this comment (you claim that multiple
  inheritance is statically checked for conflicts even when the object parts
  [traits?] being composed have statically unknown types). So how could you
  prevent a dynamic trait composition mechanism from encountering a conflict
  if you are, say, composing two traits with statically known type 'top'?



Review #258C
===========================================================================

Overall merit
-------------
C. Weak paper, though I will not fight strongly against it

Confidence
----------
X. I am an expert in this area

Paper summary
-------------
This paper puts forward the definition of SEDEL, a new polymorphic, statically-typed and delegation-based OO language.  It supports polymorphism, separates subtyping from inheritance, and something called dynamically composable traits.  The latter is the main new feature of this language.  The design is based on earlier theoretical work on disjoint intersection types and disjoint polymorphism.

Comments for author
-------------------
This is nice work that seems to make an important contribution.  I think you dwell a bit too much on the contravariant subtyping issues in languages at the beginning of the paper.  I suspect your remark about one reason for not allowing contravariant parameter types because they are rarely needed is indeed on the mark and the major reason languages don't both.  I see that you need this later on, but I don't think you need to spend as much time early on with this topic -- a quick remark would be sufficient.  I also agree with you that subtyping ≠ inheritance is also important for OO languages.  However, section 2.2 on restrictions on multiple inheritance is really what you want to focus most on.

One concern with your example in 2.2  If the method m had type () -> A rather than A -> A, then the merge of C[A] and C[B] would not work as you would have variants of m with types () -> a and () -> B, which will not live happily in the same object

The disjoint type and disjoint polymorphism seem to be the key ideas here that lead to a powerful extension over other languages.  The example of modeling Object Algebras is key here, particularly the use of the merge operator for building objects out of traits.  However, you don't mention the equivalent of private/protected methods.  Do those make a difference as they may not be visible to the merge operator?  Having a duplicate method that is protected can disrupt a public method.

The work as presented is quite nice.  However, I do have some concerns as the language becomes more realistic and complete:

1.  Private/protected as explained above.  Does the disjoint operator A * B only look at public methods?  If so, big problems can arise.  In other context, if you actually want to pass around classes as first class objects, you must know the types of all methods, not just the public ones.  Even without that if the type A promises fewer methods than the trait being merged actually has, how will the disjoint operator really protect you?

2.  Mutable state.   Order of initialization can be a huge issue.  In what order are you going to run the constructors when you have multiple traits.

3.  You talk about the language as using delegation.  However, what you seem to mean by that is simply that you can inherit from objects.  This starts making a difference once you have state.  At that point, delegation starts running into problems with shared state.  You might want to take a look at the paper Grace's inheritance which will appear in JOT.  You can find it at http://web.cecs.pdx.edu/~black/publications/.  (Grace actually has a lot of similarities with SEDEL, including subtyping separate from inheritance, traits with an exclusion operator, inheriting from (fresh) objects, etc.)

4.  A major concern here is that this paper is a relatively small change from the theoretical paper on which it is built.  I think it would be much stronger if you added at least mutable state and confronted the design difficulties there.



Response1 Response by Xuan Bi <xbi@cs.hku.hk>
===========================================================================
We thank the reviewers for their comments.

Most reviewers seem to be confused by the concept of inheritance in our paper.
We believe there is a established standard of what is inheritance in the
literature, that is, the denotational model of inheritance proposed by Cook in
his thesis: "Inheritance is an incremental modification mechanism in the
presence of late-bound self-reference". Throughout the paper, we use the word
"inheritance" in exactly the same sense. We understand the confusion as the word
"inheritance" is overloaded too much. We agree that we should clear the
confusion upfront in the paper.

Most reviewers are concerned with our small changes to Fi on which this paper is
built. As we emphasized in the paper, the theoretical parts of Fi are not a
contribution of this paper. What we focus here is to "put these ideas into
practice", notably, the area of extensible designs, which is an important
application domain, and which are difficult to solve in mainstream OO languages.
We offer a simple and elegant language-based solution. Previous works focus on
the theoretical parts, but they didn't consider applications as thoroughly as we
have (reviewers seem to ignore our case study), neither did they realize the
connections between disjoint intersection types and safe delegation-based
programming.

SEDEL has a more general notion of the self-reference. In lots of work on
typing the self-reference, people expect this to be the type of the object
itself (the so-called "This" type). What we propose here is something different
where we can choose any type for the self-reference. In principle we could
choose "This" too.

## Reviewer A

> First of all, it seems that there are very few extensions with respect to the
> typed core language $F_i$ to be a paper on its own.

We never claim that this paper is about extensions of Fi! We *clearly*
state *5 contributions* at the end of our introduction and none of them
says anything about extensions to Fi.

With all due respect for the reviewer, this review is non-constructive. It
appears to expect some extensions to Fi (which we do not claim anywhere), and
simply ignores the 5 contributions that are stated in the introduction.
Therefore, we end up not having any useful information on how to improve the
work from this review.

The reviewer could at least go through the contributions and say something
(positive or negative) about those.

## Reviewer B

> p1.30-40: When you imply that subclasses do not need to create subtypes, the
> question immediately arises how a subclass can inherit a method implementation.

As we state in the paper, an important difference between SEDEL and other OO
models is on how to type the self-reference. One could view the standard OO
model as a special case of what SEDEL supports (if we assume SEDEL has a self
type "This"). That is, the conventional OO model would correspond to a
declaration such as:

```
// In the traditional model the self-reference has the self-type
trait t { self : This => ...}
```

In SEDEL the interpretation of the self-reference is the requirements of the
trait (what are the set of methods required by the self reference). This allows
us for example to require methods that are not defined in a trait (which avoids
the need for abstract methods). So, SEDEL's model can be viewed as a relaxation
of the standard model. The relaxation being that you can choose any type for the
self-reference, rather than the fixed "This" type.

> p2.2, 'inheritance .. a relation on objects': Well, (Cook et al 1989)
> considers 'inheritance' to be a relationship that creates a ...

We should have been more precise here. Thank you.

> p4.23, 'inherit code without creating any subtype relation': How would C++
> private inheritance fail to do this?

In C++, a derived class from private inheritance is not a subtype of the base
class. In that sense, this is similar to what we wanted here. But private
inheritance also implies that all public and protected members of the base
become *private* members of the derived. Now this is not what we wanted.

> p6.33: You could give a tiny hint about what you'd like 'new x with y' to do.

Perhaps we shouldn't have written that code. The point is that there's
no easy way to build a value with type A with B in scala when A or B
are not statically known. In SEDEL the merge operator allows us to do
this.

> p8.7, 'type of self is .. top': If so, how can the method body of 'def x' be type checked?

In Java, when you write "x", it implicitly means "self.x", this is not the case
in SEDEL. "x" here refers to the parameter of the constructor "point". So self
being of type top is OK. But if we *explicitly* write "def x = self.x" then this
is a error, as you would expect, and we need to annotate self to have type
"Point" to pass the type checker.

> p8.12: Is the 'Point' type going to be an inherent property of the new 'point'
> object, or is it just going to be the type of the 'new' expression? ... So is
> this type argument to 'new' really useful?

See the Information Hiding reply at the end for when this type is useful.

> p9.37: If trait composition conflicts are checked by the type checker at the
> expression where the traits are composed, composition of traits cannot take
> place unless the full set of members is known.

Yes it can. It is sufficient to statically know that the types of the two traits
being composed are *disjoint*, even if we do not know their full static types.
So:

```
def dynamicTraits A [B * A] (t1 : Trait[A], t2 : Trait[B]) = new[A & B] t1 & t2
```

is a valid program in SEDEL. The details of disjointness checking are discussed
in great detail in (Alpuim et al. 2017). And we emphasize that the safety and
coherence proofs for Fi have been verified in Coq!

> p10.9: It is not obvious how it would have eliminated the conflict if the
> 'radius' fields in 'circle' and in 'asOval' had had different types.

Then they don't have conflict at all; they can coexist nicely. We allow the same
field names to coexist, as along as their types are *disjoint*. We suggest
taking a look at (Alpuim et al. 2017) to have a better understanding of what
constitutes a conflict (or non-disjointness in their jargon).

> It's not obvious, however, what you mean by saying that 'norm' is
> "parameterized".

You cannot write something like this in Scala, for example:

```
class F(norm : Object) extends norm
```

This is of course invalid syntax in Scala, because extends can only take
class/trait names. But the intention here would be to *parametrize* over some
implementation of Object, which we can later provide as an argument. That's what
we mean by parameterized.

> So we get this:
>
>       A <: {l: A_1->B_1 } & {l: A_2->B_2}
>       -----------------------------------
>       A <: {l: A_1 | A_2 -> B_1 & B_2}

The rule proposed is unsound! It allows the following subtyping judgment:

```
{l : Int -> String} & {l : Bool -> Char} <: {l : Int | Bool -> String & Char}
```

We can understand the situation better by writing the coercion function from
`{l : Int -> String} & {l : Bool -> Char}` to `{l : Int | Bool -> String & Char}`:

Suppose we have a function `f1 :: Int -> String`, and `f2 :: Bool -> Char`, how
can we make a function of type `Int | Bool -> String & Char`? Something like (in
Haskell syntax):

```
\f :: Int | Bool ->
  case f of
    x :: Int   -> f1 x    -- the return type should be (String, Char), but we can only make a value of String
    y :: Bool  -> f2 y    -- ... but we can only make a value of Char
```

There is no way to write such coercion!

For union subtyping, we suggest "Elaborating Intersection and Union Types" by
Joshua Dunfield.

## Reviewer C

> One concern with your example in 2.2 If the method m had type () -> A rather
> than A -> A, then the merge of C[A] and C[B] would not work as you would have
> variants of m with types () -> a and () -> B, which will not live happily in
> the same object

They do live happily in the same object in SEDEL as long as A and B are
disjoint. See more on function disjointness in (Oliveira et al. 2016). In fact
this feature is essential for composing Object Algebras, and is related to the
limitation pointed out in Section 2.2.

> ... However, you don't mention the equivalent of private/protected methods. Do
> those make a difference as they may not be visible to the merge operator?
> Having a duplicate method that is protected can disrupt a public method.

No. "protected" and "private" methods never give rise to conflicts (even if they
have the same names). So the merge operator only really cares about the public
interfaces.

Importantly, information hiding is achieved by different means in SEDEL. We do
not actually use private/protected as other languages, but we can simulate
those.

For example, for protected methods, in Java you may write:

```
class A {
   public Int foo() {return bar();}
   protected Int bar() {...}
}

class B extends A {
   public Int m() {return bar();}
}

...
B x = new B();
...

```

In SEDEL you accomplish the same by:

```
// public interfaces
type A = {foo : () -> Int}
type B = A & {m : () -> Int}

trait a() {self : {bar : () -> Int} => // self requires a bar
   def foo() = self.bar()
   def bar() = ...
}

trait b() inherits a {self :  {bar : () -> Int} =>
   def m() = self.bar() // bar is inherited and visible here
}

...
new[B] b() // no bar is visible here!
...
```

For private methods, SEDEL actually supports a syntax (which we did not present
in the paper) that allows us to completely hide methods:

```
// the syntax ": A" next specifies the "public" type of the trait
trait a() : A {self : {bar : () -> Int} =>
   def foo() = self.bar()
   def bar() = ...  // bar is only visible inside trait a, so it is effectively private
}
```
