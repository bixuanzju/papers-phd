% Formalization of Explicit CoC

embed {{ tex-preamble
  \newcommand{\labeledjudge}[1]{\vdash_{\!\!\mathsf{#1} } }
  \newcommand{\kw}[1]{\mathbf{#1} }
}}

%%% Metavariables
metavar x, y, z, X, D, K, N, R, cc {{ tex c }}, bb {{ tex b }}, nn {{ tex n }}, uu {{ tex u }} ::= {{ com Variable names }}
indexvar i, j, n, m ::= {{ com Index variables }}

%%% Syntax
grammar

%% Expressions
e, t {{ tex \tau }}, T {{ tex \sigma }}, ro {{ tex \rho }} :: 'e_' ::=       {{ com Expressions    }}
  | x                         ::  :: Var        {{ com Variable }}
  | star                      ::  :: Star       {{ com Type of Types }}
  | e1 e2                     ::  :: App        {{ com Application }}
  | \ x : t . e               ::  :: Lam        {{ com Abstraction }}
  | Pi x : t  . T             ::  :: Pi         {{ com Dependent Product }}
  | castup [ t ] e            :: M:: CastUp     {{ com Cast Up }}
  | castdown e                :: M:: CastDown   {{ com Cast Down }}
  | mu x : t . e              ::  :: Mu         {{ com Polymorphic Recursion }}
  | e1 [ x |-> e2 ]           :: M:: Sub        {{ com Substitution }}
  | ( e )                     :: M:: Parens     {{ com Parenthesized expression }}
  | let x : t = e2 in e1      :: M:: LetBinding {{ com Let binding }}
  | t1 -> t2                  :: M:: FuncType   {{ com Function type }}
  | lit                       :: M:: Literals   {{ com Literals }}
  | e *                       :: M:: Starred    {{ com Starred expression }}
  | << e >>                   :: M:: ExprVec
  | e1 (+) e2                 :: M:: ExprUnion
  | ( << u : t1 >> ) -> t2    :: M:: FuncTypeVec
  | ( << u : t1 >>n ) -> t2   :: M:: FuncTypeVecN
  | ( u : t1 ) -> t2          :: M:: DepFuncType
  | \ << u : t >> . e         :: M:: LamVec
  | \ << u : t >>n . e        :: M:: LamVecN
  | e1 [ << e2 |-> t2 >> ]    :: M:: SubstVec
  | D @ << u >>               :: M:: Datatype
  | D @ << u >>n              :: M:: DatatypeN
  | e1 [ D @ << u >> |-> e3 ] :: M:: ExprSubst
  | \\\ e                     :: M:: LineHack
  | & e                       :: M:: AlignHack
  | @@                        :: M:: DummyExpr
  | let x * : t = e2 in e1    :: M:: StarBinding
  | s                         :: M:: Sort
  | foldn [ t ] e             :: M:: CastUpMulti
  | unfoldn e                 :: M:: CastDownMulti
  | K << u >> << e >>         :: M:: Constructor
  | fold [ t ] T              :: M:: Fold
  | unfold T                  :: M:: Unfold
  | foldnp [ t ] e            :: M:: CastUpMultiP
  | unfoldnp e                :: M:: CastDownMultiP


%% source
es {{ tex E }}, ts {{ tex T }} :: 'es_' ::=       {{ com Expressions    }}
  | X                         ::  :: Var        {{ com Variable }}
  | star                      ::  :: Star       {{ com Type of Types }}
  | es1 es2                   ::  :: App        {{ com Application }}
  | \ X : ts . es             ::  :: Lam        {{ com Abstraction }}
  | Pi X : ts1  . ts2         ::  :: Pi         {{ com Dependent Product }}
  | mu X : ts . es            ::  :: Mu         {{ com Polymorphic Recursion }}
  | ts1 && ts2                ::  :: InterT     {{ com Intersection Type }}
  | es1 ,, es2                ::  :: Inter      {{ com Merge }}
  | sig { << d >> }           :: M:: Signature  {{ com Signature }}
  | mod { << b >> }           :: M:: Module     {{ com Module }}
  | pp . X                    :: M:: Path       {{ com Path }}
  | open { << b >> } in es2   :: M:: Open       {{ com Local open }}
  | let x = es1 in es2        :: M:: LetBinding {{ com Let binding }}

%% Path
pp {{ tex P }}  :: 'pp_' ::=     {{ com Path }}
  | X                  ::   :: Variable      {{ com Variable }}
  | pp . X               ::  :: Project       {{ com Project }}


%% Declarations
d {{ tex D }}  :: 'd_' ::=     {{ com Declarations }}
  | X : ts                  ::   :: Declaration      {{ com Declaration }}
  | X : ts = es               :: M :: Definition       {{ com Definition }}

%% Binding
b {{ tex B }}  :: 'b_' ::=     {{ com Bindings }}
  | X [: ts ] = es               ::   :: Definition       {{ com Definition }}


%% Target
et {{ tex e }}, tt {{ tex \tau }}, Tt {{ tex \sigma }} :: 'et_' ::=       {{ com Expressions    }}
  | x                         ::  :: Var        {{ com Variable }}
  | star                      ::  :: Star       {{ com Type of Types }}
  | et1 et2                   ::  :: App        {{ com Application }}
  | \ x : tt . et             ::  :: Lam        {{ com Abstraction }}
  | Pi x : tt  . Tt           ::  :: Pi         {{ com Dependent Product }}
  | castup [ tt ] et          ::  :: CastUp     {{ com Cast Up }}
  | castdown et               ::  :: CastDown   {{ com Cast Down }}
  | mu x : tt . et            ::  :: Mu         {{ com Polymorphic Recursion }}
  | sigma x : tt . Tt         :: M :: Sum        {{ com Dependent Sum }}
  | tt1 ** tt2                 ::  :: Product        {{ com Product }}
  | ( et1 , et2 ) as  tt      :: M :: DPair       {{ com Dependent Pair }}
  | ( et1 , et2 )             ::  :: Pair       {{ com Pair }}
  | pa et                     :: M :: Project1   {{ com Project 1 }}
  | projk et                     ::   :: Project   {{ com Project }}
  | pb et                     :: M :: Project2   {{ com Project 2 }}
  | let x = et1 in et2        ::  :: LetBinding {{ com Let binding }}
  | ()                      ::  :: UnitVal    {{ com Unit Value }}
  | Unit                      ::  :: UnitTy     {{ com Unit Type }}


%% Literals
lit :: 'lit_' ::=
  | int                 :: M:: IntType
  | bool                :: M:: BoolType
  | three               :: M:: Number

%% Sorts
s, ss {{ tex t }} :: 's_' ::= {{ com Sorts }}
  | star                ::  :: Star                  {{ com Star }}
  | square              ::  :: Square                {{ com Square }}


%% Contexts
G {{ tex \Gamma }} :: 'G_' ::= {{ com Contexts }}
  | empty          ::  :: Empty       {{ com Empty }}
  | G , x : t      ::  :: Binding     {{ com Variable Binding }}
  | G , x : t = e  ::  :: DefBinding  {{ com Definition Binding }}
  | G , G'         :: M:: CtxBind     {{ com Context Binding }}
  | G [ x |-> e ]  :: M:: CtxSubst    {{ com Context substitution }}
  | G *            :: M:: CtxStar     {{ com Starred context }}
  | ee : tt        :: M:: BindCoC

%% Values
v :: 'v_' ::=                               {{ com Values   }}
  | star                 ::  :: Star       {{ com Type of Types }}
  | \ x : t . e          ::  :: Lam        {{ com Abstraction  }}
  | Pi x : t1 . t2       ::  :: Pi         {{ com Dependent Product }}
  | castup [ t ] e       ::  :: CastUp     {{ com Cast Up }}


%%% Terminals
terminals :: 'terminals_' ::=
  | \        ::  :: lambda    {{ tex \lambda }}
  | sigma    ::  :: sigma     {{ tex \Sigma }}
  | Pi       ::  :: pi        {{ tex \Pi }}
  | pa      ::  :: pi1       {{ tex \pi_1 }}
  | pb      ::  :: pi2       {{ tex \pi_2 }}
  | projk      ::  :: proj       {{ tex \mathsf{proj}_\mathsf{k} }}
  | mu       ::  :: mu        {{ tex \mu }}
  | star     ::  :: star      {{ tex \star }}
  | square   ::  :: square    {{ tex \Box }}
  | empty    ::  :: empty     {{ tex \varnothing }}
  | open     ::  :: open      {{ tex \kw{open} }}
  | sig      ::  :: sig       {{ tex \kw{sig} }}
  | struct   ::  :: struct    {{ tex \kw{struct} }}
  | ->       ::  :: to        {{ tex \rightarrow }}
  | -->      ::  :: steps     {{ tex \longrightarrow }}
  | -->>     ::  :: nsteps    {{ tex \longrightarrow_n }}
  | ->>      ::  :: msteps    {{ tex \twoheadrightarrow }}
  | |->      ::  :: mapsto    {{ tex \mapsto }}
  | castup   ::  :: castup    {{ tex \mathsf{cast}^{\uparrow} }}
  | ]        ::  :: bracketr  {{ tex \ottsym{]} \, }}
  | [:       ::  :: bracketl  {{ tex \, \ottsym{[:} \, }}
  | |-       ::  :: turnstile {{ tex \vdash }}
  | ==       ::  :: equiv     {{ tex \equiv }}
  | =a       ::  :: alphaeq   {{ tex \equiv }}
  | =b       ::  :: betaeq    {{ tex =_{\beta} }}
  | castdown ::  :: castdown  {{ tex \mathsf{cast}_{\downarrow} }}
  | let      ::  :: let       {{ tex \kw{let} }}
  | letrec   ::  :: letrec    {{ tex \kw{letrec} }}
  | in       ::  :: key_in    {{ tex \kw{in} }}
  | eqb      ::  :: eqb       {{ tex =_{\beta} }}
  | int      ::  :: int       {{ tex \mathit{Int} }}
  | bool     ::  :: bool      {{ tex \mathit{Bool} }}
  | three    ::  :: three     {{ tex 3 }}
  | elt      ::  :: elt       {{ tex \in }}
  | *        ::  :: upstar    {{ tex ^{*} }}
  | **        ::  :: prod    {{ tex \,*\, }}
  | .        ::  :: dot       {{ tex .~ }}
  | =>       ::  :: match     {{ tex \Rightarrow }}
  | /=       ::  :: ineq      {{ tex \not \eq }}
  | data     ::  :: data      {{ tex \kw{data} }}
  | case     ::  :: case      {{ tex \kw{case} }}
  | of       ::  :: of        {{ tex \kw{of} }}
  | <<       ::  :: vecl      {{ tex \,\overline{ }}
  | >>       ::  :: vecr      {{ tex }\, }}
  | >>n      ::  :: vecrn     {{ tex }^{n}\, }}
  | @        ::  :: marker    {{ tex }}
  | ~>       ::  :: transto   {{ tex \rightsquigarrow }}
  | ~~>      ::  :: transtohl {{ tex \rightsquigarrow }}
  | (+)      ::  :: union     {{ tex \uplus }}
  | :=       ::  :: define    {{ tex \triangleq ~ }}
  | &        ::  :: align     {{ tex & }}
  | \\\      ::  :: newline   {{ tex \\ & }}
  | @@       ::  :: dummy     {{ tex }}
  | foldn    ::  :: foldn     {{ tex \mathsf{cast}_{\uparrow}^n }}
  | unfoldn  ::  :: unfoldn   {{ tex \mathsf{cast}_{\downarrow}^n }}
  | cast     ::  :: cast      {{ tex \mathsf{cast} }}
  | fold     ::  :: fold      {{ tex \mathsf{fold} }}
  | unfold   ::  :: unfold    {{ tex \mathsf{unfold} }}
  | foldnp   ::  :: foldnp    {{ tex \mathsf{cast}_{\uparrow}^{n+1} }}
  | unfoldnp ::  :: unfoldnp  {{ tex \mathsf{cast}_{\downarrow}^{n+1} }}
  | &&       ::  :: intert    {{ tex \,\&\, }}
  | ,,       ::  :: inter     {{ tex ,, }}

%%% Fomulae
formula :: 'formula_' ::=
  | judgement                          ::   :: judgement
  | G1 = G2                            ::   :: context_rewrite
  | Gs1 = Gs2                          ::   :: context_rewrite_src
  | e1 = e2                            ::   :: rewrite
  | e1 /= e2                           ::   :: inequality
  | e1 =b e2                           ::   :: beta_equality
  | e1 =a e2                           ::   :: alpha_equality
  | e1 == e2                           ::   :: equivalence
  | ( formula )                        ::   :: parens
  | x : t elt G                        ::   :: context_inclusion
  | formula \\                         ::   :: lbhack {{ tex [[formula]] \ottlinebreak }}
  | u : A elt Gs                       ::   :: context_inclusion_src
  | << formula >>                      ::   :: formula_vector
  | E1 = E2                            ::   :: rewrite_src
  | e1 := e2                           ::   :: definition
  | x fresh G                          ::   :: freshment
    {{ tex [[x]] \not \in \kw{dom}([[G]]) }}
  | ee1 =b ee2                         ::   :: beta_equality_coc
  | p1 => E1 elt << p2 => E2 >>        ::   :: pattern_inclusion
  | |- Gs ~> G  ::   :: trans_context
    {{ tex \labeledjudge{wf} [[Gs]] [[~>]] [[G]] }}
  | Gs  |- pgm : A ~> e  ::   :: trans_program
    {{ tex [[Gs]] \labeledjudge{pg} [[pgm]] : [[A]] [[~>]] [[e]] }}
  | Gs  |- decl : Gs' ~> e  ::   :: trans_decl
    {{ tex [[Gs]] \labeledjudge{d} [[decl]] : [[Gs']] [[~>]] [[e]] }}
  | Gs  |- p => E : B -> A ~> e  ::   :: trans_pattern
    {{ tex [[Gs]] \labeledjudge{p} [[p]] [[=>]] [[E]] : [[B]] [[->]] [[A]] [[~>]] [[e]] }}
  | Gs  |- E : A ~> e  ::   :: trans_expr
    {{ tex [[Gs]] \labeledjudge{s} [[E]] : [[A]] [[~>]] [[e]] }}
  | |- Gs  ::   :: srcty_context
    {{ tex \labeledjudge{wf} [[Gs]] }}
  | Gs  |- pgm : A  ::   :: srcty_program
    {{ tex [[Gs]] \labeledjudge{pg} [[pgm]] : [[A]] }}
  | Gs  |- decl : Gs'  ::   :: srcty_decl
    {{ tex [[Gs]] \labeledjudge{d} [[decl]] : [[Gs']] }}
  | Gs  |- p => E : B -> A  ::   :: srcty_pattern
    {{ tex [[Gs]] \labeledjudge{p} [[p]] [[=>]] [[E]] : [[B]] [[->]] [[A]] }}
  | Gs  |- E : A  ::   :: srcty_expr
    {{ tex [[Gs]] \labeledjudge{s} [[E]] : [[A]] }}
