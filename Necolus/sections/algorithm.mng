%%% !!! WARNING: AUTO GENERATED. DO NOT MODIFY !!! %%%

\section{Algorithmic Subtyping}
\label{sec:alg}

This section presents an algorithm that implements the subtyping relation in
\cref{fig:subtype_decl}. While BCD subtyping is well-known, the
presence of a transitivity axiom in the rules means that the system is
not algorithmic. This raises an obvious question: how to obtain an
algorithm for this subtyping relation? Laurent~\cite{Laurent12note} has shown that simply dropping
the transitivity rule from the BCD system is not possible without losing expressivity. Hence, this avenue for
obtaining an algorithm is not available. 
%Moreover, even if transitivity elimination
%would be possible, the remaining rules are still highly overlapping, and pose
%difficulties for an implementation.  
Instead, we adapt Pierce's decision
procedure~\cite{pierce1989decision} for a subtyping system (closely
related to BCD) to obtain a sound and complete algorithm for our
BCD extension. Our algorithm extends Pierce's decision
procedure with subtyping of singleton records and
coercion generation. We prove in Coq that the algorithm is sound and complete with
respect to the declarative version. At the same time we
find some errors and missing lemmas in Pierce's original manual proofs.

%The algorithm is implemented in our
%prototype implementation. \jeremy{should i say more about implementation?}

%See \cref{sec:alg} for the details. 
%\bruno{The meaning of the paragraph is somewhat obscure to me. After
%  discussing with Tom, it seems that what may be meant here is that we
%cannot do cut elimination, which is a common process that you can try
%for certain systems with subtyping. However Pierce managed to find
%another way to get a sound/complete algorithmic system. Maybe 
%the text can be improved.}


\subsection{The Subtyping Algorithm}

\begin{figure}[t]
  \centering
  \begin{small}
  \drules[A]{$ \mathcal{L}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c} $}{Algorithmic subtyping}{and, arr, rcd, top, arrNat, rcdNat, andNOne, andNTwo, nat}
  \end{small}
  \caption{Algorithmic subtyping of \name}
  \label{fig:algorithm}
\end{figure}


\Cref{fig:algorithm} shows the algorithmic subtyping judgement $ \mathcal{L}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c} $.
This judgement is the algorithmic counterpart of the declarative
judgement $ \ottnt{A}   \ottsym{<:}   \mathcal{L}  \rightarrow  \ottnt{B}  \rulehl{ \rightsquigarrow   \ottnt{c} } $, where the symbol $\mathcal{L}$ stands for a
queue of types and labels. Definition~\ref{def:fs} converts a queue to a type:
\begin{definition} $\mathcal{L}  \rightarrow  \ottnt{A}$ is inductively defined as follows: \label{def:fs}
  \begin{mathpar}
    \ottsym{[]}  \rightarrow  \ottnt{A} = \ottnt{A} \and
    \ottsym{(}  \mathcal{L}  \ottsym{,}  \ottnt{B}  \ottsym{)}  \rightarrow  \ottnt{A} = \mathcal{L}  \rightarrow  \ottsym{(}  \ottnt{B}  \rightarrow  \ottnt{A}  \ottsym{)} \and
    \ottsym{(}  \mathcal{L}  \ottsym{,}  \ottsym{\{}  \ottmv{l}  \ottsym{\}}  \ottsym{)}  \rightarrow  \ottnt{A} = \mathcal{L}  \rightarrow  \ottsym{\{}  \ottmv{l}  \ottsym{:}  \ottnt{A}  \ottsym{\}}
  \end{mathpar}
\end{definition}
For instance, if $\mathcal{L} = \ottnt{A} , \ottnt{B} , \{\ottmv{l}\} $, then $\mathcal{L}  \rightarrow  C$ abbreviates $ \ottnt{A}  \rightarrow  \ottnt{B}  \rightarrow  \ottsym{\{}  \ottmv{l}  \ottsym{:}  C  \ottsym{\}}$.

The basic idea of $ \mathcal{L}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c} $ is to first perform a structural
analysis of $\ottnt{B}$, which descends into both sides of $ \, \& \, $'s (\rref{A-and}),
into the right side of $ \rightarrow $'s (\rref{A-arr}), and into the fields of records
(\rref{A-rcd}) until it reaches one of the two base cases, $ \mathsf{Nat} $ or
$ \top $. If the base case is $ \top $, then the subtyping holds trivially
(\rref{A-top}). If the base case is $ \mathsf{Nat} $, the algorithm performs a
structural analysis of $\ottnt{A}$, in which $\mathcal{L}$ plays an important role. The
left sides of $ \rightarrow $'s are pushed onto $\mathcal{L}$ as they are encountered in
$\ottnt{B}$ and popped off again later, left to right, as $ \rightarrow $'s are encountered
in $\ottnt{A}$ (\rref{A-arrNat}). Similarly, the labels are pushed onto $\mathcal{L}$ as
they are encountered in $\ottnt{B}$ and popped off again later, left to right, as
records are encountered in $\ottnt{A}$ (\rref{A-rcdNat}). The remaining rules are
similar to their declarative counterparts. Let us illustrate the algorithm
with an example
derivation (for space reasons we use $ \mathsf{N} $ and $ \mathsf{S} $ to denote $ \mathsf{Nat} $ and $ \mathsf{String} $ respectively),
which is essentially the one used by the \lstinline{add} field in \cref{sec:overview}. The
readers can try to give a corresponding derivation using the declarative
subtyping and see how \rref{S-trans} plays an essential role there.
\begin{small}
\begin{mathpar}
  \inferrule*[right=\rref*{A-rcd}]
  { \inferrule*[right=\rref*{A-arr}(\textit{twice})]
    { \inferrule*[right=\rref*{A-and}]
      { D \\ D' }
      { \{ \ottmv{l}  \},  \mathsf{N}   \, \& \,   \mathsf{S}  , \mathsf{N}   \, \& \,   \mathsf{S}  \vdash \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}   \ottsym{\}}  \, \& \,  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{S}   \rightarrow   \mathsf{S}   \rightarrow   \mathsf{S}   \ottsym{\}} \prec :  \mathsf{N}   \, \& \,   \mathsf{S}  }  }
    { \{ \ottmv{l}  \} \vdash \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}   \ottsym{\}}  \, \& \,  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{S}   \rightarrow   \mathsf{S}   \rightarrow   \mathsf{S}   \ottsym{\}} \prec :  \mathsf{N}   \, \& \,   \mathsf{S}   \rightarrow   \mathsf{N}   \, \& \,   \mathsf{S}   \rightarrow   \mathsf{N}   \, \& \,   \mathsf{S} }      }
  {  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}   \ottsym{\}}  \, \& \,  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{S}   \rightarrow   \mathsf{S}   \rightarrow   \mathsf{S}   \ottsym{\}} \prec : \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \, \& \,   \mathsf{S}   \rightarrow   \mathsf{N}   \, \& \,   \mathsf{S}   \rightarrow   \mathsf{N}   \, \& \,   \mathsf{S}   \ottsym{\}}   }
\end{mathpar}
\end{small}
where the sub-derivation $D$ is shown below ($D'$ is similar):
\begin{small}
\begin{mathpar}
\inferrule*[right=\rref*{A-andN1}]
        { \inferrule*[right=\rref*{A-rcdNat}]
          { \inferrule*[right=\rref*{A-arrNat}]
            { \inferrule*{ \dots } {  \mathsf{N}   \, \& \,   \mathsf{S}  \prec :  \mathsf{N}  }
              \\
              \inferrule* {\dots} {  \mathsf{N}   \, \& \,   \mathsf{S}  \vdash  \mathsf{N}   \rightarrow   \mathsf{N}  \prec :  \mathsf{N}  }     }
            { \mathsf{N}   \, \& \,   \mathsf{S}  , \mathsf{N}   \, \& \,   \mathsf{S}  \vdash  \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}  \prec :  \mathsf{N} } }
          { \{ \ottmv{l}  \},  \mathsf{N}   \, \& \,   \mathsf{S}  , \mathsf{N}   \, \& \,   \mathsf{S}  \vdash \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}   \ottsym{\}} \prec :  \mathsf{N}  } }
        { \{ \ottmv{l}  \},  \mathsf{N}   \, \& \,   \mathsf{S}  , \mathsf{N}   \, \& \,   \mathsf{S}  \vdash \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{N}   \rightarrow   \mathsf{N}   \rightarrow   \mathsf{N}   \ottsym{\}}  \, \& \,  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \mathsf{S}   \rightarrow   \mathsf{S}   \rightarrow   \mathsf{S}   \ottsym{\}} \prec :  \mathsf{N}  }
\end{mathpar}
\end{small}
Now consider the coercions. Algorithmic subtyping uses the same set of
coercions as declarative subtyping. However, because algorithmic
subtyping has a different structure, the rules generate slightly more
complicated coercions. Two meta-functions $\llbracket \cdot \rrbracket_{\top}$
and $\llbracket \cdot \rrbracket_{\&}$ used in \rref{A-top,A-and} respectively,
are meant to generate correct forms of coercions. They are defined recursively
on $\mathcal{L}$ and are shown in \cref{fig:coercion}.

\begin{figure}[t]
    \centering
    \begin{small}
    \begin{subfigure}[b]{0.5\textwidth}
      \begin{align*}
         \llbracket  \ottsym{[]}  \rrbracket_{\top}  &=   \mathsf{top}  \\
         \llbracket  \ottsym{\{}  \ottmv{l}  \ottsym{\}}  \ottsym{,}  \mathcal{L}  \rrbracket_{\top}  &=  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \llbracket  \mathcal{L}  \rrbracket_{\top}   \ottsym{\}}  \circ   \mathsf{top}_{ \{  \ottmv{l}  \} }   \\
         \llbracket  \ottnt{A}  \ottsym{,}  \mathcal{L}  \rrbracket_{\top}  &=  \ottsym{(}  \mathsf{top}  \rightarrow   \llbracket  \mathcal{L}  \rrbracket_{\top}   \ottsym{)}  \circ  \ottsym{(}   \mathsf{top}_{\rightarrow}  \circ  \mathsf{top}   \ottsym{)} 
      \end{align*}
    \end{subfigure} ~
    \begin{subfigure}[b]{0.45\textwidth}
      \begin{align*}
         \llbracket  \ottsym{[]}  \rrbracket_{\&}  &=   \mathsf{id}  \\
         \llbracket  \ottsym{\{}  \ottmv{l}  \ottsym{\}}  \ottsym{,}  \mathcal{L}  \rrbracket_{\&}  &=  \ottsym{\{}  \ottmv{l}  \ottsym{:}   \llbracket  \mathcal{L}  \rrbracket_{\&}   \ottsym{\}}  \circ   \mathsf{dist}_{ \{  \ottmv{l}  \} }   \\
         \llbracket  \ottnt{A}  \ottsym{,}  \mathcal{L}  \rrbracket_{\&}  &=  \ottsym{(}  \mathsf{id}  \rightarrow   \llbracket  \mathcal{L}  \rrbracket_{\&}   \ottsym{)}  \circ  \mathsf{dist}_{\rightarrow} 
      \end{align*}
    \end{subfigure}
    \end{small}
    \caption{Meta-functions of coercions}\label{fig:coercion}
\end{figure}

\subsection{Correctness of the Algorithm}

To establish the correctness of the algorithm, we must show that the algorithm
is both sound and complete with respect to the declarative specification. While
soundness follows quite easily, completeness is much harder. The proof of
completeness essentially follows that of Pierce~\cite{pierce1989decision}
%%\footnote{
%%While transferring \cite{pierce1989decision}'s manual proofs to Coq,
%%we discovered several errors, which will be reported along the way.}
in that we
need to show the algorithmic subtyping is reflexive and
transitive. 


\subparagraph{Soundness of the Algorithm.}

% The following two lemmas connect the declarative subtyping with the meta-functions.

% \begin{lemma} \label{lemma:top}
%   $ \top   \ottsym{<:}   \mathcal{L}  \rightarrow  \top  \rulehl{ \rightsquigarrow    \llbracket  \mathcal{L}  \rrbracket_{\top}  } $
% \end{lemma}
% \begin{proof}
%   By induction on the length of $\mathcal{L}$.
% \end{proof}

% \begin{lemma} \label{lemma:and}
%   $ \ottsym{(}  \mathcal{L}  \rightarrow  \ottnt{A}  \ottsym{)}  \, \& \,  \ottsym{(}  \mathcal{L}  \rightarrow  \ottnt{B}  \ottsym{)}   \ottsym{<:}   \mathcal{L}  \rightarrow  \ottsym{(}  \ottnt{A}  \, \& \,  \ottnt{B}  \ottsym{)}  \rulehl{ \rightsquigarrow    \llbracket  \mathcal{L}  \rrbracket_{\&}  } $
% \end{lemma}
% \begin{proof}
%   By induction on the length of $\mathcal{L}$.
% \end{proof}

The proof of soundness is straightforward.
\begin{theorem}[Soundness] \label{thm:soundness}
  If $ \mathcal{L}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c} $ then $\ottnt{A} <: \mathcal{L} \rightarrow \ottnt{B}  \rightsquigarrow  \ottnt{c}$.
\end{theorem}
\begin{proof}
  By induction on the derivation of the algorithmic subtyping.
  % and applying \cref{lemma:top,lemma:and} where appropriate.
\end{proof}


\subparagraph{Completeness of the Algorithm.}


\newcommand{\U}[1]{\mathcal{U}(#1)}

Completeness, however, is much harder. The reason is that, due to the use of
$\mathcal{L}$, reflexivity and transitivity are not entirely obvious. We need to
strengthen the induction hypothesis by introducing the notion of a set,
$\U{\ottnt{A}}$, of ``reflexive supertypes'' of $\ottnt{A}$, as defined below:
\begin{mathpar}
  \U{ \top } \defeq \{  \top   \} \and
  \U{ \mathsf{Nat} } \defeq \{  \mathsf{Nat}   \} \and
  \U{\ottsym{\{}  \ottmv{l}  \ottsym{:}  \ottnt{A}  \ottsym{\}}} \defeq \{ \ottsym{\{}  \ottmv{l}  \ottsym{:}  \ottnt{B}  \ottsym{\}} \mid \ottnt{B} \in \U{\ottnt{A}}  \} \and
  \U{\ottnt{A}  \, \& \,  \ottnt{B}} \defeq \U{\ottnt{A}} \cup \U{\ottnt{B}} \cup \{ \ottnt{A}  \, \& \,  \ottnt{B} \} \and
  \U{\ottnt{A}  \rightarrow  \ottnt{B}} \defeq \{ \ottnt{A}  \rightarrow  C \mid C \in \U{\ottnt{B}} \}
\end{mathpar}
We show two lemmas about $\U{\ottnt{A}}$ that are crucial in the subsequent proofs.
\begin{lemma} \label{lemma:set_refl}
  $\ottnt{A} \in \U{\ottnt{A}}$
\end{lemma}
\begin{proof}
  By induction on the structure of $\ottnt{A}$.
\end{proof}

\begin{lemma} \label{lemma:set_trans}
  If $\ottnt{A} \in \U{\ottnt{B}}$ and $\ottnt{B} \in \U{C}$, then $\ottnt{A} \in \U{C}$.
\end{lemma}
\begin{proof}
  By induction on the structure of $\ottnt{B}$.
\end{proof}

\begin{remark}
  Lemma~\ref{lemma:set_trans} is not found in Pierce's proofs~\cite{pierce1989decision}, which is
  crucial in Lemma~\ref{lemma:refl0}, from which reflexivity (Lemma~\ref{lemma:refl})
  follows immediately.
\end{remark}

% Next we show the following lemma from which reflexivity (Lemma~\ref{lemma:refl})

\begin{lemma} \label{lemma:refl0}
  If $\mathcal{L}  \rightarrow  \ottnt{B} \in \U{\ottnt{A}}$ then there exists $\ottnt{c}$ such that $ \mathcal{L}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c} $.
\end{lemma}
\begin{proof}
  By induction on $\mathsf{size}(\ottnt{A}) + \mathsf{size}(\ottnt{B}) + \mathsf{size}(\mathcal{L})$.
\end{proof}
% \begin{remark}
%   \cite{pierce1989decision}'s proof is wrong in one case~\cite[pp.~10, Case~ii]{pierce1989decision} because we need \cref{lemma:set_trans} to be able
%   to apply the inductive hypothesis.
% \end{remark}

Now it immediately follows that the algorithmic subtyping is reflexive.

\begin{lemma}[Reflexivity] \label{lemma:refl}
  For every $\ottnt{A}$ there exists $\ottnt{c}$ such that $ \ottsym{[]}   \vdash   \ottnt{A}  \prec :  \ottnt{A}   \rightsquigarrow   \ottnt{c} $.
\end{lemma}
\begin{proof}
  Immediate from Lemma~\ref{lemma:set_refl} and Lemma~\ref{lemma:refl0}.
\end{proof}

We omit the details of the proof of transitivity.
%The proof of transitivity is, to quote \cite{pierce1989decision}, typically
%``the hardest single piece'' of metatheory. We omit the details here for lack of space and
%refer the interested reader to our Coq development.

\begin{lemma}[Transitivity] \label{lemma:trans}
  If $ \ottsym{[]}   \vdash   \ottnt{A_{{\mathrm{1}}}}  \prec :  \ottnt{A_{{\mathrm{2}}}}   \rightsquigarrow   \ottnt{c_{{\mathrm{1}}}} $ and $ \ottsym{[]}   \vdash   \ottnt{A_{{\mathrm{2}}}}  \prec :  \ottnt{A_{{\mathrm{3}}}}   \rightsquigarrow   \ottnt{c_{{\mathrm{2}}}} $, then there
  exists $\ottnt{c}$ such that $ \ottsym{[]}   \vdash   \ottnt{A_{{\mathrm{1}}}}  \prec :  \ottnt{A_{{\mathrm{3}}}}   \rightsquigarrow   \ottnt{c} $.
\end{lemma}

With reflexivity and transitivity in position, we show the main theorem.

\renewcommand\ottaltinferrule[4]{
  \inferrule*[narrower=0.5,right=#1,#2]
    {#3}
    {#4}
}
\begin{theorem}[Completeness] \label{thm:complete}
  If $ \ottnt{A}   \ottsym{<:}   \ottnt{B}  \rulehl{ \rightsquigarrow   \ottnt{c} } $ then there exists $\ottnt{c'}$ such that $ \ottsym{[]}   \vdash   \ottnt{A}  \prec :  \ottnt{B}   \rightsquigarrow   \ottnt{c'} $.
\end{theorem}
\begin{proof}
  By induction on the derivation of the declarative subtyping and applying \cref{lemma:refl,lemma:trans} where appropriate.
\end{proof}
\begin{remark}
  Pierce's proof is wrong~\cite[pp.~20, Case~F]{pierce1989decision} in the case
  \begin{mathpar}
  \drule{S-arr}
  \end{mathpar}
  where he concludes from the inductive
  hypotheses $ \ottsym{[]}   \vdash   \ottnt{B_{{\mathrm{1}}}}  \prec :  \ottnt{A_{{\mathrm{1}}}} $ and $ \ottsym{[]}   \vdash   \ottnt{A_{{\mathrm{2}}}}  \prec :  \ottnt{B_{{\mathrm{2}}}} $ that $ \ottsym{[]}   \vdash   \ottnt{A_{{\mathrm{1}}}}  \rightarrow  \ottnt{A_{{\mathrm{2}}}}  \prec :  \ottnt{B_{{\mathrm{1}}}}  \rightarrow  \ottnt{B_{{\mathrm{2}}}} $ (rules 6a and 3).
  However his rule 6a (our \rref{A-arrNat}) only works for \textit{primitive types}, and is thus not applicable in this case. Instead we
  need a few technical lemmas to support the argument.
\end{remark}

\begin{remark}
  It is worth pointing out that the two coercions $\ottnt{c}$ and $\ottnt{c'}$ in
  Theorem~\ref{thm:complete} are contextually equivalent, which follows from
  Theorem~\ref{thm:soundness} and Corollary~\ref{lemma:coercion_same}.
\end{remark}

% Local Variables:
% org-ref-default-bibliography: ../paper.bib
% End:
